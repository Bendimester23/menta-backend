datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

generator db {
    provider = "go run github.com/prisma/prisma-client-go"
    package  = "db"
}

model User {
    id           String         @id @default(cuid())
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    username     String         @unique
    email        String         @unique
    password     String
    isTeacher    Boolean        @default(false)
    verified     Boolean        @default(false)
    emailCode    String         @default("6969")
    refreshToken RefreshToken[]
    groups       GroupMember[]
    solutions    SolvedExam[]
    schools      SchoolMember[]
    chatMessages ChatMessage[]
    chats        ChatMember[]
}

model Group {
    id              String        @id @default(cuid())
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    name            String        @unique
    codeLogin       Boolean
    loginCode       String
    requiresAproval Boolean
    members         GroupMember[]
    exams           Exam[]
    school          School?       @relation(fields: [schoolId], references: [id])
    schoolId        String?
    room            ChatRoom      @relation(fields: [roomId], references: [id])
    roomId          String        @default("")
}

model RefreshToken {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    refreshedAt DateTime @updatedAt
    owner       User     @relation(fields: [userId], references: [id])
    userId      String   @unique
}

model GroupMember {
    group    Group    @relation(fields: [groupId], references: [id])
    groupId  String
    user     User     @relation(fields: [userId], references: [id])
    userId   String
    joinedAt DateTime @default(now())
    waiting  Boolean
    leader   Boolean

    @@id([groupId, userId])
}

model SolvedExam {
    user   User   @relation(fields: [userId], references: [id])
    userId String
    exam   Exam   @relation(fields: [examId], references: [id])
    examId String

    answers  Json
    started  DateTime
    finished DateTime

    @@id([examId, userId])
}

model Exam {
    id          String   @id @default(cuid())
    group       Group    @relation(fields: [groupId], references: [id])
    groupId     String
    title       String
    description String
    questions   Json
    answers     Json
    startsAt    DateTime
    endsAt      DateTime
    maxLenght   Int
    show        Boolean  @default(false)
    showResults Boolean  @default(false)

    solutions SolvedExam[]
}

model School {
    id   String @id @default(cuid())
    name String

    code String

    members SchoolMember[]
    groups  Group[]
}

model SchoolMember {
    user     User   @relation(fields: [userId], references: [id])
    userId   String
    school   School @relation(fields: [schoolId], references: [id])
    schoolId String

    isTeacher Boolean

    @@id([userId, schoolId])
}

model ChatMessage {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    refreshedAt DateTime @updatedAt
    author      User     @relation(fields: [authorId], references: [id])
    authorId    String
    content     String
    room        ChatRoom @relation(fields: [roomId], references: [id])
    roomId      String
}

model ChatMember {
    user   User   @relation(references: [id], fields: [userId])
    userId String

    room   ChatRoom @relation(fields: [roomId], references: [id])
    roomId String

    nickname String

    @@id([userId, roomId])
}

model ChatRoom {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now())
    refreshedAt DateTime      @updatedAt
    messages    ChatMessage[]
    members     ChatMember[]
    description String
    groups      Group[]
}
